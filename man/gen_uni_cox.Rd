% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_uni_cox.R
\name{gen_uni_cox}
\alias{gen_uni_cox}
\title{gen_uni_cox
Performs univariate cox proportional hazard model on every feature}
\usage{
gen_uni_cox(X, surv_dat, surv_formula, filter = 0, genes = NULL, na_filter = 0)
}
\arguments{
\item{X}{Matrix/surv_datframe of genomic features, continuous or binary (note cannot handle categorical surv_dat for the moment).}

\item{surv_dat}{a surv_dat frame containing the survival information. This can be made of 2 or 3 columns. 1 or 2 for time,
and one for status (where 1 is event and 0 is no event).}

\item{surv_formula}{a survival formula with names matching those in surv_dat eg: Surv(time,status)~.}

\item{filter}{a numeric value between 0 and 1 (1 not included) that is the lower bound for the proportion of samples
having a genetic event (only for binary features). All features with an event rate lower than that value will be removed.
Default is 0 (all features included).}

\item{genes}{a character vector of gene names that will be the only ones to be kept. Default is NULL, all genes are used.}

\item{na_filter}{A numeric value between 0 and 1 (1 not included) that is the upper bound for the proportion of missing
values in the features of the inputted gen_dat matrix. Variables that exceed this proportion of missing values will be removed.}
}
\value{
tab A table of all the fits performed sorted by adjusted pvalues.

p An interactive plot of log(pvalue) by hazard ration.

KM List of survival plots of the top 10 most significant genes
}
\description{
gen_uni_cox
Performs univariate cox proportional hazard model on every feature
}
\examples{
library(gnomeR)
library(dplyr)
library(dtplyr)
samples <- as.character(unique(mut$Tumor_Sample_Barcode))[1:200]
gen_dat <- create_gene_binary(samples = samples, mutation = mut)
surv_dat <- clin.patients \%>\%
filter(X.Patient.Identifier \%in\%
abbreviate(samples,strict = TRUE, minlength = 9)) \%>\%
  select(X.Patient.Identifier,Overall.Survival..Months.,
   Overall.Survival.Status) \%>\%
  rename(DMPID = X.Patient.Identifier,
   time = Overall.Survival..Months.,
   status = Overall.Survival.Status) \%>\%
  mutate(time = as.numeric(as.character(time)),
         status = ifelse(status == "LIVING",0,1)) \%>\%
  filter(!is.na(time))
X <- gen_dat[match(surv_dat$DMPID,
abbreviate(rownames(gen_dat),strict = TRUE, minlength = 9)),]
gen_uni_cox(X = X, surv_dat = surv_dat,
surv_formula = Surv(time,status)~.,filter = 0.05)
}
